- name: conf dirs
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ mgo_offlineimap_base }}"
    - "{{ mgo_systemd_user_dir }}"

- name: offlineimap conf
  template:
    src: imaprc
    dest: "{{ mgo_offlineimap_conf }}"
  vars:
    _intermed_0: "{{ mgo_mailboxes | map('regex_replace', '^\\+', '') }}"
    _intermed_1: "{{ _intermed_0 | map('regex_replace', '^\\[Gmail\\]\\.', '[Gmail]/') }}"
    folderfilter_str: "{{ _intermed_1 | map('to_json') | join(', ') }}"

- name: pythonfile
  copy:
    src: pythonfile.py
    dest: "{{ mgo_pythonfile }}"

- name: offlineimap user target
  copy:
    src: any-offlineimap.target
    dest: "{{ mgo_systemd_user_dir }}"
  when: ansible_facts['system'] == 'Linux'
  notify:
    - start-enable-offlineimap-target

- name: offlineimap start all oneshot
  copy:
    src: every-offlineimap.service
    dest: "{{ mgo_systemd_user_dir }}"
  when: ansible_facts['system'] == 'Linux'
  notify:
    - ensure-everything-service-off

- name: offlineimap user service
  template:
    src: offlineimap-user.service
    dest: "{{ mgo_systemd_unit_path }}"
  when: ansible_facts['system'] == 'Linux'
  notify:
    - start-enable-offlineimap-service

- name: 1-time imap script for debug
  template:
    src: 1-time-imap.sh
    dest: "{{ mgo_user_dir }}/1-time-imap.sh"
    mode: 0755

- name: manual systemd hook
  changed_when: true
  assert:
    that: true
  when: mgo_systemd_start_enable_force
  notify:
    - start-enable-offlineimap-service
